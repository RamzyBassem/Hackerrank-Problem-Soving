HackerRank Minimum Swaps 2
Difficulty : Medium 
Problem Url : https://www.hackerrank.com/challenges/minimum-swaps-2

Problem Statment : You are given an unordered array consisting of consecutive integers 
[1, 2, 3, ..., n] without any duplicates. You are allowed to swap any two elements.
Find the minimum number of swaps required to sort the array in ascending order.

Example : 

Input : arr=[7, 1, 3, 2, 4, 5, 6] 

i   arr                     swap (indices)
0   [7, 1, 3, 2, 4, 5, 6]   swap (0,3)
1   [2, 1, 3, 7, 4, 5, 6]   swap (0,1)
2   [1, 2, 3, 7, 4, 5, 6]   swap (3,4)
3   [1, 2, 3, 4, 7, 5, 6]   swap (4,5)
4   [1, 2, 3, 4, 5, 7, 6]   swap (5,6)
5   [1, 2, 3, 4, 5, 6, 7]

Output : minSwaps = 5

Algorithm : 
Note that the array should consist of consecutive integers which will make the solution different from if this condition wasn't given.
loop on the array with iterator i:
  if arr[i] ! = i+1           // The value at arr[i] is in the wrong position so we will need to place it in its correct position.
    swap(arr[i] , arr[ arr[i] - 1 ])       // in the above example 7 is placed in the wrong position so we want to swap with the value in arr[6] 
    increment minSwaps         // increment the value of the minSwap
      if arr[i] ! = i+1       // if the element that we swapped is in the wrong position we still want to place it in the right positon 
          decrement i         // so we will decrement i so in the next iteration of the loop we get to fix it 
          
          
return minSwaps          


Java code :

    static int minimumSwaps(int[] arr) {
        int temp;
        int swaps=0;
        for(int i =0;i<arr.length;i++){
            if(arr[i]!=i+1){
                temp=arr[arr[i]-1];
                arr[arr[i]-1]=arr[i];
                arr[i]=temp;
                swaps++;
                if(arr[i]!=i+1)
                    i--;
            }
        }
        return  swaps;
    }
    
    O(n+n) = O(n) where n is the length of the array
